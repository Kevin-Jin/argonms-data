2010-10-10  GoldenKevin  (revision 1)

	* Initial import, with fully working Map.wz compiling and a fully
	working sample interpreter for map data.

2010-10-10  GoldenKevin  (revision 2)

	* Modified existing code to add an executable class for KvjInterpreter:
	kvjinterpreter.WzInterpreter. (MapDataReader, WzInterpreter, DataReader)
	* Replaced HashMaps in MapleMap with TreeMaps to keep the structures in
	the order of the keys. Added label to signify start of Footholds and
	Portals list in MapleMap.toString().
	* Modifed Portal.toString() to only add parenthesis after the target
	map id (tm) if the target string (tn) was not empty.
	* Changed LittleEndianReader into an abstract class with two
	implementations: LittleEndianByteArrayReader for reading a byte array,
	and LittleEndianFileStreamReader for reading a file input stream.
	* Fixed problems with LittleEndianReader that were due to discrepancies
	between the unsigned bytes stored in the files and Java's signed bytes.
	* Changed the default path constants in the WzCompiler source file.

2010-10-11  GoldenKevin  (revision 3)

	* Modified XmlReader.traverseBlock so that it doesn't skip the first
	element. This was necessary for the addition of mob compiling. However,
	it came with a performance penalty and more complex code for map
	compiling. Now I really need to refactor that huge method.
	* Renamed Converter.handleSpecial to handleDir. Modified the parameters
	and return type so the data is written in the method itself and it
	doesn't return it as a byte array.
	* Cleaned up MapleMap.toString() in the interpreter. It now prints
	reactors and life as well.
	* Added mob compiling and mob interpreting.
	* Changed the default path (I'm now developing on a Windows environment)
 	and the default wz file to Mob.wz.

2010-10-12  GoldenKevin  (revision 4)

	* Added toString method to kvjinterpreter.map.structure.Reactor
	* Renamed setTarget method in kvjinterpreter.map.structure.Portal to
	setTargetName. Modified comments in kvjcompiler.map.structure.Portal.
	* Added support for reactor compiling.

2010-11-19  GoldenKevin  (revision 5)
	* Complete rewrite of KvjCompiler. Expected behavior has not changed,
	and generated code should still be identical to previous revisions.
	Performance has been slightly hampered, as a trade off to simplicity.
	Code is more object oriented now, and it should make the addition of
	Item.wz compiling easier, which will break the current one to one file
	correspondence between the WZ files and the compiled binaries by
	compiling individual items as different files inside a folder that is
	named after the XML WZ file that contains the specific item.

2010-11-25  GoldenKevin  (revision 6)
	* Added preliminary Item.wz compiling as well as part of the Kvj
	parser for Item.wz. Please excuse all the comments in KvjInterpreter
	regarding items because it still is a work in progress after all.

2011-01-09  GoldenKevin  (revision 7)
	* Replaced references of FileOutputStream with a BufferedOutputStream
	that uses an underlying FileOutputStream. This should improve
	performance somewhat for KvjCompiler. Both the log file and the
	compiled binary files are now outputted with buffered output streams.
	* Replaced references of FileInputStream with a BufferedInputStream
	that uses an underlying FileInputStream. This should improve
	performance somewhat for KvjInterpreter when using
	kvjinterpreter.LittleEndianFileStreamReader.
	* Fixed the file names of kvjinterpreter.LittleEndianFileStreamReader
	and kvjinterpreter.LittleEndianByteArrayReader. The names were
	previously swapped. Also added a new constructor for
	kvjinterpreter.LittleEndianByteArrayReader that takes in a File and
	automatically fills the byte array.
	* Fixed Item.wz/Pet folder not being automatically created if it
	did not exist (kvjcompiler.item.ItemConverter).
	* It's 2011 now people! Added current year on all license headers.

2011-01-09  GoldenKevin  (revision 8)
	* Finished creating the sample interpreter for Item.wz. Unlike previous
	demos, there is no output and the class ItemConverter is only there to
	show how you can implement a ItemInformationProvider. You can modify
	the main method to output data for any item.
	* Fixed PET_CONSUMABLE_BY not writing the correct integer.
	* PET_EVOL_AMOUNT is no longer written in the binaries because its
	redundant. kvjcompiler.item.ItemConverter.getDayByteFromString now
	returns the java.util.Calendar constants instead of using magic numbers.
	The constants are equivalent though.

2011-01-10  GoldenKevin  (revision 9)
	* String.wz compiling is now possible and the corresponding interpreter
	has been released as well.

Copyright 2010, 2011 GoldenKevin
Copying and distribution of this file, with or without modification, are
permitted provided the copyright notice and this notice are preserved.
